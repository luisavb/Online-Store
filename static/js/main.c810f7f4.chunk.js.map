{"version":3,"sources":["services/api.js","components/CardItem.jsx","components/Home.jsx","components/ShoppingCart.jsx","components/ProductDetailMain.jsx","components/ProductDetail.jsx","components/Checkout.jsx","App.js","serviceWorker.js","index.js"],"names":["getCategories","a","fetch","request","json","requestJson","getProductsFromCategoryAndQuery","categoryId","query","getProductDetail","produtoId","CardItem","this","props","item","onClickColocaCarrinho","data-testid","className","title","src","thumbnail","alt","width","price","to","id","type","onClick","React","Component","Home","pegarCategoriasApi","resultado","setState","categorias","onChange","target","name","value","produto","state","resultadoPesquisa","results","length","pesquisa","loading","pesquisarCategoria","categoria","htmlFor","map","key","elemento","ShoppingCart","carrinho","onClickRemoverItem","onClickDiminuirQuantidade","onClickAumentarQuantidade","index","quantidade","total","defaultProps","ProductDetail","PegaProduto","productDetail","buttonLocalStorage","event","preventDefault","form","email","texto","nota","JSON","parse","localStorage","getItem","setItem","stringify","reviews","comentarios","changeInput","bind","base_price","warranty","condition","status","placeholder","e","comentario","match","params","ProductDetailMain","Checkout","button","nome","cpf","cep","endereco","metodo","redirecionar","mensagem","tel","App","novoProduto","some","i","adItem","find","it","push","findIndex","splice","itemRemove","itemAdiciona","console","log","exact","path","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c810f7f4.chunk.js","sourcesContent":["// função para buscar a categoria do produto\nexport async function getCategories() {\n  // Implemente aqui\n  const request = await fetch('https://api.mercadolibre.com/sites/MLB/categories');\n  const requestJson = await request.json();\n  return requestJson;\n}\n// função para buscar por meio da consulta as categorias\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  // Implemente aqui! Quando o fizer, descomente os parâmetros que essa função recebe\n  const request = await fetch(`https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}&q=${query}`);\n  const requestJson = await request.json();\n  return requestJson;\n}\n// função para buscar os detalhes do produto\nexport async function getProductDetail(produtoId) {\n  // Implemente aqui! Quando o fizer, descomente os parâmetros que essa função recebe\n  const request = await fetch(`https://api.mercadolibre.com/items/${produtoId}`);\n  const requestJson = await request.json();\n  return requestJson;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './CardItem.css';\n// import { getProductDetail } from '../services/api';\n\nclass CardItem extends React.Component {\n  render() {\n    const { item, onClickColocaCarrinho } = this.props;\n    return (\n      <div data-testid=\"product\" className=\"product\">\n        <h3 className=\"title\">\n          { item.title }\n        </h3>\n        <img src={ item.thumbnail } alt={ item.title } width=\"150px\" />\n        <p className=\"price\">\n          {`R$: ${item.price}`}\n        </p>\n        <div>\n          <Link\n            to={ `/product-detail/${item.id}` }\n            data-testid=\"product-detail-link\"\n          >\n            <button\n              className=\"button-details\"\n              type=\"button\"\n            >\n              Mais detalhes...\n            </button>\n          </Link>\n          <br />\n          <button\n            className=\"button-cardItens\"\n            onClick={ onClickColocaCarrinho } // requisito 8\n            type=\"button\"\n            data-testid=\"product-add-to-cart\"\n          >\n            Adicionar ao carrinho\n          </button>\n        </div>\n      </div>\n      // link react para product\n    );\n  }\n}\n\nCardItem.propTypes = {\n  item: PropTypes.shape({\n    title: PropTypes.string,\n    thumbnail: PropTypes.string,\n    price: PropTypes.number,\n    id: PropTypes.string,\n  }).isRequired,\n  onClickColocaCarrinho: PropTypes.func.isRequired,\n};\n\nexport default CardItem;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  getCategories,\n  getProductsFromCategoryAndQuery,\n} from '../services/api';\nimport CardItem from './CardItem';\nimport './Home.css';\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      produto: '', // é o produto que escrevo dentro do input\n      categorias: [], // array das diversas categorias disponibilizadas pela API\n      pesquisa: [], // pega a pesquisa ao apertar o botao pesquisar\n      loading: null, // utilizo como condicional para mostrar o resultado da pesquisa\n      // botaoCategoria: false, // utilizo como condicional para mostrar o resultado ao clicar no botao da categoria\n      // resultadoBotaoCategoria: [], // array a ser utilizado para receber o resultado das pesquisas ao clicar no botao da categoria\n    };\n  }\n\n  componentDidMount() {\n    this.pegarCategoriasApi();\n  }\n\n  // a função abaixo utiliza a função disponibilizada pela API para pegar as categorias e as adiciono no state. Eu a coloco dentro do componentDidMount para que elas apareçam a partir do momento em que renderizo a pagina\n  pegarCategoriasApi = async () => {\n    const resultado = await getCategories();\n    this.setState({ categorias: resultado });\n    // console.log(resultado);\n  };\n\n  // função generica que serve para, ao começar a digitar no local em que foi colocada, seja alterada a chave criada para recebe-la dentro do state\n  onChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  // essa função é complementanda pela função onChange acima\n  // ao utilizar o onChange no campo de digitar para pesquisar, o state produto recebe os valores que estao sendo escritos\n  // com isso, a função onClick pega o state produto e o utiliza como parametro da função API abaixo\n  // Apos chama a função assincrona, eu pego o resultado e coloco dentro da chave pesquisa\n  onClick = async () => {\n    const { produto } = this.state;\n    const resultadoPesquisa = await getProductsFromCategoryAndQuery(\n      '',\n      produto,\n    );\n    if (resultadoPesquisa.results.length > 0) {\n      this.setState({\n        pesquisa: resultadoPesquisa.results,\n        loading: true,\n      });\n    } else {\n      this.setState({ loading: false });\n    }\n  };\n\n  // função utilizada para buscar as categorias a serem mostradas na pagina principal a qual sera utilizada dentro do map quando eu aperto o botao da categoria especifica\n  pesquisarCategoria = async (categoria) => {\n    const resultadoPesquisa = await getProductsFromCategoryAndQuery(\n      categoria,\n      '',\n    );\n\n    this.setState({\n      loading: true,\n      pesquisa: resultadoPesquisa.results,\n    });\n  };\n\n  render() {\n    const {\n      categorias,\n      produto,\n      pesquisa,\n      loading,\n      // botaoCategoria,\n      // resultadoBotaoCategoria,\n    } = this.state;\n    const { onClickColocaCarrinho } = this.props;\n    return (\n      <div className=\"container-home\">\n        <header className=\"carrinho\">\n          <h1>Online Store</h1>\n          <Link\n            data-testid=\"shopping-cart-button\"\n            to=\"/shopping-cart\"\n          >\n            <img src=\"./shopping-cart.png\" alt=\"carrinho\" width=\"40px\" />\n          </Link>\n        </header>\n        <section className=\"search\">\n          <label\n            className=\"label-input\"\n            htmlFor=\"text\"\n            data-testid=\"home-initial-message\"\n          >\n            <h3\n              className=\"search-title\"\n            >\n              Digite algum termo de pesquisa ou escolha uma categoria.\n            </h3>\n            <input\n              className=\"input-home\"\n              data-testid=\"query-input\"\n              onChange={ this.onChange }\n              value={ produto }\n              name=\"produto\"\n              type=\"text\"\n              id=\"text\"\n            />\n          </label>\n          <div className=\"button-div\">\n            <button\n              className=\"button-home\"\n              onClick={ this.onClick }\n              type=\"button\"\n              data-testid=\"query-button\"\n            >\n              Pesquisar\n            </button>\n          </div>\n        </section>\n        <section className=\"categorias-produtos\">\n          <aside className=\"aside-home\">\n            {categorias.map(\n              (\n                { id, name }, // faço um map em todas as categorias disponibilizadas para que cada uma tenha um formato de botao e o seu atributo especifico. Ao clicar no botao da categoria especifica\n              ) => (\n                <button\n                  className=\"button-category\"\n                  id=\"button-home2\"\n                  data-testid=\"category\"\n                  type=\"button\"\n                  key={ id }\n                  onClick={ () => this.pesquisarCategoria(id) } // ao clicar no botao, vai salvar todos os elementos da categoria no state resultadoBotaoCategoria\n                >\n                  {name}\n                </button>\n              ),\n            )}\n          </aside>\n          {loading && (\n            <section className=\"section-home\">\n              {pesquisa.map((elemento) => ( // uso a hof map para o cardItem mostrar as especificaçoes desejadas para cada elemento da pesquisa\n                <CardItem\n                  key={ elemento.id }\n                  item={ elemento }\n                  onClickColocaCarrinho={ () => onClickColocaCarrinho(\n                    elemento.title,\n                    elemento.price,\n                    elemento.thumbnail,\n                  ) }\n                />\n              ))}\n            </section>\n          )}\n          {loading === null && <div className=\"section-home\" />}\n          {loading === false\n          && (<p className=\"section-home\">Nenhum produto foi encontrado</p>\n          )}\n        </section>\n      </div>\n    );\n  }\n}\nHome.propTypes = {\n  onClickColocaCarrinho: PropTypes.func.isRequired,\n};\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './ShoppingCart.css';\n\nclass ShoppingCart extends React.Component {\n  render() {\n    const {\n      carrinho,\n      onClickRemoverItem,\n      onClickDiminuirQuantidade,\n      onClickAumentarQuantidade,\n    } = this.props;\n\n    return (\n      <div>\n        {carrinho.length === 0 && ( // caso o carrinho esteja vazio, aparecera esta msg\n          <p data-testid=\"shopping-cart-empty-message\">\n            Seu carrinho está vazio\n          </p>\n        )}\n        {carrinho !== 0\n          && carrinho.map((item, index) => (\n            <div className=\"productCart\" key={ index }>\n              <img src={ item.thumbnail } alt={ item.title } width=\"150px\" />\n              <div className=\"itemCart\">\n                <p data-testid=\"shopping-cart-product-name\">{item.title}</p>\n                <p>{`Valor unitário: R$ ${item.price}`}</p>\n                <p data-testid=\"shopping-cart-product-quantity\">\n                  {`Quantidade:${item.quantidade}`}\n                </p>\n                <p>{`Valor Total: R$ ${item.total}`}</p>\n              </div>\n              <div className=\"botaoCart\">\n                <button\n                  className=\"buttonCartItens\"\n                  type=\"button\"\n                  onClick={ () => onClickRemoverItem(item.title) }\n                >\n                  Remover Item\n                </button>\n                <button\n                  className=\"buttonCartItensAumentar\"\n                  type=\"button\"\n                  onClick={ () => onClickAumentarQuantidade(item.title, item.price) }\n                  data-testid=\"product-increase-quantity\"\n                >\n                  +\n                </button>\n                <button\n                  className=\"buttonCartItensRemover\"\n                  type=\"button\"\n                  onClick={ () => onClickDiminuirQuantidade(\n                    item.title,\n                    item.quantidade,\n                    item.price,\n                  ) }\n                  data-testid=\"product-decrease-quantity\"\n                >\n                  -\n                </button>\n              </div>\n            </div>\n          ))}\n        <Link to=\"/checkout\" data-testid=\"checkout-products\">\n          <button className=\"buttonCartItensCheckOut\" type=\"button\">\n            Checkout\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nShoppingCart.propTypes = {\n  carrinho: PropTypes.arrayOf(PropTypes.objectOf),\n  onClickRemoverItem: PropTypes.func.isRequired,\n  onClickDiminuirQuantidade: PropTypes.func.isRequired,\n  onClickAumentarQuantidade: PropTypes.func.isRequired,\n};\n\nShoppingCart.defaultProps = {\n  carrinho: () => [],\n};\n\nexport default ShoppingCart;\n","import React from 'react';\nimport propTypes from 'prop-types';\n// import { Link } from 'react-router-dom';\nimport { getProductDetail } from '../services/api';\nimport './ProductDetail.css';\n// import Header from './Header';\n\nclass ProductDetail extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      produto: {}, // recebe o produto\n      // avaliação: false,\n      email: '',\n      texto: '',\n      nota: '',\n      comentarios: [], // recebe os comentarios dos antigos compradores\n    };\n    this.changeInput = this.changeInput.bind(this);\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n    // const { match: { params: { id } } } = this.props; // esse é o id[aparece no browser] do produto detalhado\n    this.PegaProduto(id);\n    // verifica se há rewiews no localStorage, senão cria um array vazio.\n    if (!JSON.parse(localStorage.getItem('reviews'))) {\n      localStorage.setItem('reviews', JSON.stringify([]));\n    }\n    //  pega os reviews no localStorage e seta no State.\n    const reviews = JSON.parse(localStorage.getItem('reviews'));\n    this.setState({ comentarios: reviews });\n  }\n\n  // função que pega os detalhes do produto em analise e seta a chave produto do state\n  PegaProduto = async (produtoId) => {\n    const productDetail = await getProductDetail(produtoId);\n    // console.log(productDetail);\n    this.setState({\n      produto: productDetail,\n    });\n  }\n\n  buttonLocalStorage = (event) => {\n    event.preventDefault();\n    const { email, texto, nota } = this.state;\n    const form = { email, texto, nota };\n    // verifica se há reviews no localStorage, senão cria um array vazio.\n    if (!JSON.parse(localStorage.getItem('reviews'))) {\n      localStorage.setItem('reviews', JSON.stringify([]));\n    }\n    // pega os reviews no localStorage e seta o que já tinha com o novo comentario.\n    // alterado os reviews para receber array de objetos e nao somente um objeto.\n    let reviews = JSON.parse(localStorage.getItem('reviews'));\n    localStorage.setItem('reviews', JSON.stringify([...reviews, form])); // faço spread operator para poder adicionar os novos comentarios sem apagar os antigos\n    reviews = JSON.parse(localStorage.getItem('reviews')); // pego os novos comentarios e adiciono no state\n    this.setState({\n      email: '',\n      texto: '',\n      nota: '',\n      comentarios: reviews,\n    });\n  }\n\n  changeInput({ target }) {\n    const { name } = target;\n    if (target.type !== 'radio') {\n      this.setState({ [name]: target.value });\n    } else {\n      this.setState({ nota: target.id });\n    }\n  }\n\n  render() {\n    const { produto, email, texto, comentarios } = this.state;\n\n    const limite = ['1', '2', '3', '4', '5'];\n\n    const { onClickColocaCarrinho } = this.props;\n\n    return (\n      <main className=\"main-prod-detail\">\n        <section className=\"product-detail\">\n          <div className=\"product-img\">\n            <img src={ produto.thumbnail } alt={ produto.title } width=\"250px\" />\n          </div>\n          <div className=\"product-descricao\">\n            <h3 className=\"title\" data-testid=\"product-detail-name\">\n              { produto.title }\n            </h3>\n            <p className=\"price\">{`R$: ${produto.base_price}`}</p>\n            <h3 className=\"espec-tecnica\">Especificações Técnicas</h3>\n            <ul>\n              <li className=\"li\">{produto.warranty}</li>\n              <li className=\"li\">{`Condição: ${produto.condition}`}</li>\n              <li className=\"li\">{`Situação: ${produto.status}`}</li>\n            </ul>\n            <div>\n              <button\n                className=\"button-prod-detail\"\n                onClick={ () => onClickColocaCarrinho(\n                  produto.title,\n                  produto.price,\n                  produto.thumbnail,\n                ) }\n                type=\"button\"\n                data-testid=\"product-detail-add-to-cart\"\n              >\n                Adicionar ao carrinho\n              </button>\n\n            </div>\n          </div>\n        </section>\n        {/* <Link to=\"/shopping-cart\" data-testid=\"shopping-cart-button\">\n            carrinho de compras\n          </Link> */}\n        <section className=\"section-comentarios\">\n          <h3 className=\"opiniao-produto\">Deixe sua opinião sobre o produto</h3>\n          <div className=\"comentarios-conteudo\">\n            {/* <div className=\"form-comentarios\"> */}\n            <form className=\"form-comentarios\">\n              <input\n                className=\"input-opiniao\"\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={ email }\n                placeholder=\"Email\"\n                data-testid=\"product-detail-email\"\n                onChange={ this.changeInput }\n              />\n              <textarea\n                className=\"textarea\"\n                type=\"text\"\n                name=\"texto\"\n                id=\"text\"\n                placeholder=\"Mensagem(opcional)\"\n                value={ texto }\n                data-testid=\"product-detail-evaluation\"\n                onChange={ this.changeInput }\n              />\n              <p className=\"opiniao-produto\">Sua avaliação</p>\n              <div>\n                {limite.map((e) => (\n                  <label key={ e } htmlFor={ e }>\n                    { e }\n                    <input\n                      className=\"radio\"\n                      id={ e }\n                      type=\"radio\"\n                      data-testid={ `${e}-rating` }\n                      name=\"avaliação\"\n                      onChange={ this.changeInput }\n                    />\n                  </label>\n                )) }\n              </div>\n              <button\n                className=\"button-detail-avaliar\"\n                type=\"submit\"\n                data-testid=\"submit-review-btn\"\n                onClick={ this.buttonLocalStorage }\n              >\n                Avaliar\n              </button>\n            </form>\n            {/* </div> */}\n            <div className=\"historico-comentarios\">\n              {comentarios.map((comentario, index) => (\n                <div className=\"comentario\" key={ comentario.email + index }>\n                  <p className=\"nota\">\n                    { comentario.nota }\n                  </p>\n                  <p className=\"email\">\n                    { comentario.email }\n                  </p>\n                  <p className=\"texto\">\n                    { comentario.texto }\n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      </main>\n      // </div>\n    );\n  }\n}\n\nProductDetail.propTypes = {\n  match: propTypes.shape({\n    params: propTypes.shape({\n      id: propTypes.string,\n    }),\n  }).isRequired,\n  id: propTypes.string.isRequired,\n  onClickColocaCarrinho: propTypes.func.isRequired,\n};\n\nexport default ProductDetail;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './ProductDetail.css';\nimport propTypes from 'prop-types';\nimport ProductDetailMain from './ProductDetailMain';\n// import { getProductDetail } from '../services/api';\n\nclass ProductDetail extends React.Component {\n  render() {\n    const { match: { params: { id } } } = this.props;\n    const { onClickColocaCarrinho } = this.props;\n    return (\n      <div className=\"container-product\">\n        <header className=\"carrinho\">\n          <h1>Online Store</h1>\n          <Link\n            data-testid=\"shopping-cart-button\"\n            to=\"/shopping-cart\"\n          >\n            <img src=\"../shopping-cart.png\" alt=\"carrinho\" width=\"40px\" />\n          </Link>\n        </header>\n        <ProductDetailMain id={ id } onClickColocaCarrinho={ onClickColocaCarrinho } />\n      </div>\n    );\n  }\n}\n\nProductDetail.propTypes = {\n  match: propTypes.shape({\n    params: propTypes.shape({\n      id: propTypes.string,\n    }),\n  }).isRequired,\n  onClickColocaCarrinho: propTypes.func.isRequired,\n};\n\nexport default ProductDetail;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Link } from 'react-router-dom';\nimport { Redirect } from 'react-router-dom';\nimport './Checkout.css';\n\nclass Checkout extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      nome: '',\n      cpf: '',\n      email: '',\n      tel: '',\n      cep: '',\n      endereco: '',\n      metodo: '',\n      redirecionar: true, // caso os itens estjam todos preenchidos, ira redirecionar para a pagina principal do site\n      mensagem: true, // caso seja falso, ira mostrar uma mensagem pedindo para preencher os requisitos\n    };\n    this.changeInput = this.changeInput.bind(this);\n  }\n\n  button = (event) => {\n    event.preventDefault();\n    const { nome, cpf, email, cep, endereco, metodo } = this.state;\n    if (\n      nome.length > 0\n      && cpf.length > 0\n      && email.length > 0\n      && cep.length > 0\n      && endereco.length > 0\n      && metodo.length > 0\n    ) {\n      this.setState({ redirecionar: false });\n    } else {\n      this.setState({ mensagem: false });\n    }\n  };\n\n  changeInput({ target }) {\n    const { name } = target;\n    if (target.type !== 'radio') {\n      this.setState({ [name]: target.value });\n    } else {\n      this.setState({ metodo: target.id });\n    }\n  }\n\n  render() {\n    const { nome, cpf, email, tel, cep, endereco, redirecionar, mensagem } = this.state;\n\n    const { carrinho } = this.props;\n\n    return (\n      <div>\n        <section>\n          {carrinho !== 0\n            && carrinho.map((item, index) => (\n              <div className=\"productCheckout\" key={ index }>\n                <img src={ item.thumbnail } alt={ item.title } width=\"150px\" />\n                <div className=\"nameCheckout\">\n                  <p>{item.title}</p>\n                </div>\n                <p className=\"checkoutP\">{`Valor unitário: R$ ${item.price}`}</p>\n                <p className=\"checkoutP\">{`Quantidade:${item.quantidade}`}</p>\n                <p className=\"checkoutP\">{`Valor Total: R$ ${item.total}`}</p>\n              </div>\n            ))}\n          {/* soma de todos os preços */}\n        </section>\n        <section>\n          <form>\n            <h3 className=\"titleCheckout\">Informações do Comprador:</h3>\n            <br />\n            <input\n              type=\"text\"\n              value={ nome }\n              data-testid=\"checkout-fullname\"\n              name=\"nome\"\n              placeholder=\"Nome Completo\"\n              onChange={ this.changeInput }\n            />\n            <input\n              type=\"text\"\n              value={ cpf }\n              data-testid=\"checkout-cpf\"\n              name=\"cpf\"\n              placeholder=\"CPF\"\n              onChange={ this.changeInput }\n            />\n            <br />\n            <input\n              type=\"email\"\n              value={ email }\n              data-testid=\"checkout-email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              onChange={ this.changeInput }\n            />\n            <input\n              type=\"tel\"\n              value={ tel }\n              data-testid=\"checkout-phone\"\n              name=\"tel\"\n              placeholder=\"Telefone\"\n              onChange={ this.changeInput }\n            />\n            <br />\n            <input\n              type=\"text\"\n              value={ cep }\n              data-testid=\"checkout-cep\"\n              name=\"cep\"\n              placeholder=\"CEP\"\n              onChange={ this.changeInput }\n            />\n            <input\n              type=\"text\"\n              value={ endereco }\n              data-testid=\"checkout-address\"\n              name=\"endereco\"\n              placeholder=\"Endereço\"\n              onChange={ this.changeInput }\n            />\n          </form>\n          <form>\n            <br />\n            <h3 className=\"titleCheckout\">Método de Pagamento:</h3>\n            <label htmlFor=\"boleto\">\n              <input\n                type=\"radio\"\n                name=\"metodo\"\n                id=\"boleto\"\n                onChange={ this.changeInput }\n              />\n              Boleto\n            </label>\n            <label htmlFor=\"visa\">\n              {/* <legend>Cartão de Crédito:</legend> */}\n              <input\n                type=\"radio\"\n                name=\"metodo\"\n                id=\"visa\"\n                onChange={ this.changeInput }\n              />\n              Visa\n            </label>\n            <label htmlFor=\"master\">\n              <input\n                type=\"radio\"\n                name=\"metodo\"\n                id=\"master\"\n                onChange={ this.changeInput }\n              />\n              MasterCard\n            </label>\n            <label htmlFor=\"elo\">\n              <input\n                type=\"radio\"\n                name=\"metodo\"\n                id=\"elo\"\n                onChange={ this.changeInput }\n              />\n              Elo\n            </label>\n            <br />\n            <button\n              className=\"buttonComprarCheckout\"\n              type=\"submit\"\n              onClick={ this.button }\n            >\n              Comprar\n            </button>\n          </form>\n        </section>\n        {!redirecionar && <Redirect to=\"/Online-Store\" />}\n        {!mensagem && <p> Preencha todos os campos </p>}\n      </div>\n    );\n  }\n}\n\nCheckout.propTypes = {\n  carrinho: PropTypes.arrayOf(PropTypes.objectOf),\n};\n\nCheckout.defaultProps = {\n  carrinho: () => [],\n};\n\nexport default Checkout;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport ShoppingCart from './components/ShoppingCart';\nimport ProductDetail from './components/ProductDetail';\nimport Checkout from './components/Checkout';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      carrinho: [], // recebe os produtos a serem colocados no carrinho de compras\n    };\n  }\n\n  onClickColocaCarrinho = (title, price, thumbnail) => { // requisito 8\n    const { carrinho } = this.state; // pego os produtos colocados no carrinho\n    const novoProduto = { // crio uma nova constante em que será colocados os paramentros colocados na função em questao\n      title,\n      price,\n      thumbnail,\n      quantidade: 1,\n      total: price,\n    };\n    // faço uma hof que retornara um valor booleano true ou false caso exista um elemento do carrinho que possua um titulo igual ao titulo em analise\n    const checarItem = carrinho.some((i) => i.title === title);\n    // caso ja exista um produto no carrinho que ja tenho o mesmo titulo, retornando o valor true, peço para achar outro produto que possua o mesmo titulo e aumentar mais 1 no chave quantidade e retornar os preços somados dos produtos\n    if (checarItem) {\n      const adItem = carrinho.find((it) => it.title === title);\n      adItem.quantidade += 1;\n      adItem.total = adItem.price + price;\n      // adItem.price += price;\n    } else {\n      // caso o carrinho nao possua um produto com esse titulo, peço que este produto seja adicionado a chave carrinho\n      carrinho.push(novoProduto);\n    }\n  }\n  // função para remover o item na pagina do carrinho de compras\n  // nessa função, procuro achar se existe um produto dentro do carrinho que possua o titulo em questao, e com o  findIndex retorno a posição dele\n  // apos isso, uso splice para retirar apenas um elemento a partir da posição salva na constante index e seto o carrinho sem o produto\n\n  onClickRemoverItem = (title) => {\n    const { carrinho } = this.state;\n    const index = carrinho.findIndex((i) => i.title === title);\n    carrinho.splice(index, 1);\n    this.setState({ carrinho });\n  }\n  // função para diminuir a quantidade de um produto especificaçoes\n  // caso a quantidade do produto seja 1, chamo a função acima para remove-lo do carrinho\n  // crio uma constante para receber o produto do carrinho que tenha o titulo igual ao procurado\n  // a partir dessa constante criada, chamo a sua chave quantidade para reduzir em 1 os elementos desse produto e chamo a chave total para diminuir o valor do preço individual do produto e seto a nova situação do carrinho\n\n  onClickDiminuirQuantidade = (title, quantidade, price) => {\n    if (quantidade === 1) return this.onClickRemoverItem(title);\n    const { carrinho } = this.state;\n    const itemRemove = carrinho.find((i) => i.title === title);\n    itemRemove.quantidade -= 1;\n    // console.log(price, itemRemove.price);\n    itemRemove.total -= price;\n    // console.log(itemRemove.price);\n    this.setState({ carrinho });\n  }\n\n  // função criada para aumentar a quantidade do produto no carrinho\n  // crio uma constante para receber o produto do carrinho que seja igual ao titulo que procuramos\n  // com essa constante, utilizo a sua chave quantidade para aumentar os elementos do produto em analise e utilizo a sua chave total para aumentar o seu valor por meio do price individual\n  // apos isso, seto a nova situação do carrinho\n  onClickAumentarQuantidade = (title, price) => {\n    const { carrinho } = this.state;\n    const itemAdiciona = carrinho.find((i) => i.title === title);\n    itemAdiciona.quantidade += 1;\n    itemAdiciona.total += price;\n    console.log(price, itemAdiciona.price);\n    this.setState({ carrinho });\n  }\n  // passo as ultimas 3 funçoes acima como props para o shoppingcart e o state carrinho tambem\n\n  render() {\n    const { carrinho } = this.state;\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route\n            exact\n            path=\"/Online-Store\"\n            render={ (props) => (\n              <Home\n                { ...props }\n                onClickColocaCarrinho={ this.onClickColocaCarrinho }\n              />\n            ) }\n          />\n          <Route\n            path=\"/shopping-cart\"\n            render={ (props) => (\n              <ShoppingCart\n                { ...props }\n                carrinho={ carrinho } // os elementos adicionados pelo carrinho\n                onClickRemoverItem={ this.onClickRemoverItem }\n                onClickDiminuirQuantidade={ this.onClickDiminuirQuantidade }\n                onClickAumentarQuantidade={ this.onClickAumentarQuantidade }\n              />\n            ) }\n          />\n          <Route\n            path=\"/product-detail/:id\"\n            render={ (props) => (\n              <ProductDetail\n                { ...props }\n                onClickColocaCarrinho={ this.onClickColocaCarrinho }\n              />) }\n          />\n          <Route\n            path=\"/checkout\"\n            render={ (props) => (\n              <Checkout\n                { ...props }\n                carrinho={ carrinho }\n              />) }\n          />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}